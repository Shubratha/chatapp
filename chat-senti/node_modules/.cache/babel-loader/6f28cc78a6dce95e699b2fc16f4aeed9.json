{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component, Fragment } from 'react';\nimport axios from 'axios';\nimport Pusher from 'pusher-js';\nimport ChatMessage from './ChatMessage';\nvar SAD_EMOJI = [55357, 56864];\nvar HAPPY_EMOJI = [55357, 56832];\nvar NEUTRAL_EMOJI = [55357, 56848];\n\nvar Chat =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Chat, _Component);\n\n  function Chat() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Chat);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Chat)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      chats: []\n    });\n\n    return _this;\n  }\n\n  _createClass(Chat, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.pusher = new Pusher(process.env.PUSHER_APP_KEY, {\n        cluster: process.env.PUSHER_APP_CLUSTER,\n        encrypted: true\n      });\n      this.channel = this.pusher.subscribe('chat-room');\n      this.channel.bind('new-message', function (_ref) {\n        var _ref$chat = _ref.chat,\n            chat = _ref$chat === void 0 ? null : _ref$chat;\n        var chats = _this2.state.chats;\n        chat && chats.push(chat);\n\n        _this2.setState({\n          chats: chats\n        });\n      });\n      this.pusher.connection.bind('connected', function () {\n        axios.post('/messages').then(function (response) {\n          var chats = response.data.messages;\n\n          _this2.setState({\n            chats: chats\n          });\n        });\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.pusher.disconnect();\n    } // handleKeyUp = evt => {\n    //   const value = evt.target.value;\n    //   if (evt.keyCode === 13 && !evt.shiftKey) {\n    //     const { activeUser: user } = this.props;\n    //     const chat = { user, message: value, timestamp: +new Date };\n    //     evt.target.value = '';\n    //     axios.post('/message', chat);\n    //   }\n    // }\n    // render() {\n    //   return (this.props.activeUser && <Fragment>\n    //     <div className=\"border-bottom border-gray w-100 d-flex align-items-center bg-white\" style={{ height: 90 }}>\n    //       <h2 className=\"text-dark mb-0 mx-4 px-2\">{this.props.activeUser}</h2>\n    //     </div>\n    //     // <div className=\"px-4 pb-4 w-100 d-flex flex-row flex-wrap align-items-start align-content-start position-relative\" style={{ height: 'calc(100% - 180px)', overflowY: 'scroll' }}>\n    //     //   {this.state.chats.map((chat, index) => {\n    //     //     const previous = Math.max(0, index - 1);\n    //     //     const previousChat = this.state.chats[previous];\n    //     //     const position = chat.user === this.props.activeUser ? \"right\" : \"left\";\n    //     //     const isFirst = previous === index;\n    //     //     const inSequence = chat.user === previousChat.user;\n    //     //     const hasDelay = Math.ceil((chat.timestamp - previousChat.timestamp) / (1000 * 60)) > 1;\n    //     //     const mood = chat.sentiment > 0 ? HAPPY_EMOJI : (chat.sentiment === 0 ? NEUTRAL_EMOJI : SAD_EMOJI);\n    //     //     return (\n    //     //       <Fragment key={index}>\n    //     //         { (isFirst || !inSequence || hasDelay) && (\n    //     //           <div className={`d-block w-100 font-weight-bold text-dark mt-4 pb-1 px-1 text-${position}`} style={{ fontSize: '0.9rem' }}>\n    //     //             <span className=\"d-block\" style={{ fontSize: '1.6rem' }}>\n    //     //               {String.fromCodePoint(...mood)}\n    //     //             </span>\n    //     //             <span>{chat.user || 'Anonymous'}</span>\n    //     //           </div>\n    //     //         ) }\n    //     //         <ChatMessage message={chat.message} position={position} />\n    //     //       </Fragment>\n    //     //     );\n    //     //   })}\n    //     // </div>\n    //     <div className=\"border-top border-gray w-100 px-4 d-flex align-items-center bg-light\" style={{ minHeight: 90 }}>\n    //       <textarea className=\"form-control px-3 py-2\" onKeyUp={this.handleKeyUp} placeholder=\"Enter a chat message\" style={{ resize: 'none' }}></textarea>\n    //     </div>\n    //   </Fragment> )\n    // }\n\n  }]);\n\n  return Chat;\n}(Component);\n\nexport default Chat;","map":{"version":3,"sources":["C:\\Users\\shubr\\Documents\\Projects\\chat-senti\\components\\Chat.js"],"names":["React","Component","Fragment","axios","Pusher","ChatMessage","SAD_EMOJI","HAPPY_EMOJI","NEUTRAL_EMOJI","Chat","chats","pusher","process","env","PUSHER_APP_KEY","cluster","PUSHER_APP_CLUSTER","encrypted","channel","subscribe","bind","chat","state","push","setState","connection","post","then","response","data","messages","disconnect"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,IAAMC,SAAS,GAAG,CAAC,KAAD,EAAQ,KAAR,CAAlB;AACA,IAAMC,WAAW,GAAG,CAAC,KAAD,EAAQ,KAAR,CAApB;AACA,IAAMC,aAAa,GAAG,CAAC,KAAD,EAAQ,KAAR,CAAtB;;IAEMC,I;;;;;;;;;;;;;;;;;;4DAEI;AAAEC,MAAAA,KAAK,EAAE;AAAT,K;;;;;;;wCAEY;AAAA;;AAElB,WAAKC,MAAL,GAAc,IAAIP,MAAJ,CAAWQ,OAAO,CAACC,GAAR,CAAYC,cAAvB,EAAuC;AACnDC,QAAAA,OAAO,EAAEH,OAAO,CAACC,GAAR,CAAYG,kBAD8B;AAEnDC,QAAAA,SAAS,EAAE;AAFwC,OAAvC,CAAd;AAKA,WAAKC,OAAL,GAAe,KAAKP,MAAL,CAAYQ,SAAZ,CAAsB,WAAtB,CAAf;AAEA,WAAKD,OAAL,CAAaE,IAAb,CAAkB,aAAlB,EAAiC,gBAAqB;AAAA,6BAAlBC,IAAkB;AAAA,YAAlBA,IAAkB,0BAAX,IAAW;AAAA,YAC5CX,KAD4C,GAClC,MAAI,CAACY,KAD6B,CAC5CZ,KAD4C;AAEpDW,QAAAA,IAAI,IAAIX,KAAK,CAACa,IAAN,CAAWF,IAAX,CAAR;;AACA,QAAA,MAAI,CAACG,QAAL,CAAc;AAAEd,UAAAA,KAAK,EAALA;AAAF,SAAd;AACD,OAJD;AAMA,WAAKC,MAAL,CAAYc,UAAZ,CAAuBL,IAAvB,CAA4B,WAA5B,EAAyC,YAAM;AAC7CjB,QAAAA,KAAK,CAACuB,IAAN,CAAW,WAAX,EACGC,IADH,CACQ,UAAAC,QAAQ,EAAI;AAChB,cAAMlB,KAAK,GAAGkB,QAAQ,CAACC,IAAT,CAAcC,QAA5B;;AACA,UAAA,MAAI,CAACN,QAAL,CAAc;AAAEd,YAAAA,KAAK,EAALA;AAAF,WAAd;AACD,SAJH;AAKD,OAND;AAQD;;;2CAEsB;AACrB,WAAKC,MAAL,CAAYoB,UAAZ;AACD,K,CAED;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;;;;;EA5FiB9B,S;;AAgGnB,eAAeQ,IAAf","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport axios from 'axios';\r\nimport Pusher from 'pusher-js';\r\nimport ChatMessage from './ChatMessage';\r\n\r\nconst SAD_EMOJI = [55357, 56864];\r\nconst HAPPY_EMOJI = [55357, 56832];\r\nconst NEUTRAL_EMOJI = [55357, 56848];\r\n\r\nclass Chat extends Component {\r\n\r\n  state = { chats: [] }\r\n\r\n  componentDidMount() {\r\n\r\n    this.pusher = new Pusher(process.env.PUSHER_APP_KEY, {\r\n      cluster: process.env.PUSHER_APP_CLUSTER,\r\n      encrypted: true\r\n    });\r\n\r\n    this.channel = this.pusher.subscribe('chat-room');\r\n\r\n    this.channel.bind('new-message', ({ chat = null }) => {\r\n      const { chats } = this.state;\r\n      chat && chats.push(chat);\r\n      this.setState({ chats });\r\n    });\r\n\r\n    this.pusher.connection.bind('connected', () => {\r\n      axios.post('/messages')\r\n        .then(response => {\r\n          const chats = response.data.messages;\r\n          this.setState({ chats });\r\n        });\r\n    });\r\n\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.pusher.disconnect();\r\n  }\r\n\r\n  // handleKeyUp = evt => {\r\n  //   const value = evt.target.value;\r\n\r\n  //   if (evt.keyCode === 13 && !evt.shiftKey) {\r\n  //     const { activeUser: user } = this.props;\r\n  //     const chat = { user, message: value, timestamp: +new Date };\r\n\r\n  //     evt.target.value = '';\r\n  //     axios.post('/message', chat);\r\n  //   }\r\n  // }\r\n\r\n  // render() {\r\n  //   return (this.props.activeUser && <Fragment>\r\n\r\n  //     <div className=\"border-bottom border-gray w-100 d-flex align-items-center bg-white\" style={{ height: 90 }}>\r\n  //       <h2 className=\"text-dark mb-0 mx-4 px-2\">{this.props.activeUser}</h2>\r\n  //     </div>\r\n\r\n  //     // <div className=\"px-4 pb-4 w-100 d-flex flex-row flex-wrap align-items-start align-content-start position-relative\" style={{ height: 'calc(100% - 180px)', overflowY: 'scroll' }}>\r\n\r\n  //     //   {this.state.chats.map((chat, index) => {\r\n\r\n  //     //     const previous = Math.max(0, index - 1);\r\n  //     //     const previousChat = this.state.chats[previous];\r\n  //     //     const position = chat.user === this.props.activeUser ? \"right\" : \"left\";\r\n\r\n  //     //     const isFirst = previous === index;\r\n  //     //     const inSequence = chat.user === previousChat.user;\r\n  //     //     const hasDelay = Math.ceil((chat.timestamp - previousChat.timestamp) / (1000 * 60)) > 1;\r\n\r\n  //     //     const mood = chat.sentiment > 0 ? HAPPY_EMOJI : (chat.sentiment === 0 ? NEUTRAL_EMOJI : SAD_EMOJI);\r\n\r\n  //     //     return (\r\n  //     //       <Fragment key={index}>\r\n\r\n  //     //         { (isFirst || !inSequence || hasDelay) && (\r\n  //     //           <div className={`d-block w-100 font-weight-bold text-dark mt-4 pb-1 px-1 text-${position}`} style={{ fontSize: '0.9rem' }}>\r\n  //     //             <span className=\"d-block\" style={{ fontSize: '1.6rem' }}>\r\n  //     //               {String.fromCodePoint(...mood)}\r\n  //     //             </span>\r\n  //     //             <span>{chat.user || 'Anonymous'}</span>\r\n  //     //           </div>\r\n  //     //         ) }\r\n\r\n  //     //         <ChatMessage message={chat.message} position={position} />\r\n\r\n  //     //       </Fragment>\r\n  //     //     );\r\n\r\n  //     //   })}\r\n\r\n  //     // </div>\r\n\r\n  //     <div className=\"border-top border-gray w-100 px-4 d-flex align-items-center bg-light\" style={{ minHeight: 90 }}>\r\n  //       <textarea className=\"form-control px-3 py-2\" onKeyUp={this.handleKeyUp} placeholder=\"Enter a chat message\" style={{ resize: 'none' }}></textarea>\r\n  //     </div>\r\n\r\n  //   </Fragment> )\r\n  // }\r\n\r\n}\r\n\r\nexport default Chat;"]},"metadata":{},"sourceType":"module"}